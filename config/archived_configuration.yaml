  - binary_sensor:
    - name: "Request 2kW Heater"
      state: >
        {% set alreadyOn = is_state('switch.heater', 'on') %}
        {% set batteryCharging = states('sensor.solax_local_battery_power_adjusted')|int %}
        {% set pv = states('sensor.solax_local_pv_output')|int %}
        {% set feedIn = states('sensor.solax_local_feedin_power')|int %}
        {% set load = states('sensor.solax_local_load_power')|int %}
        {% set batteryLevel = states('sensor.solax_local_battery_soc')|int %}
        {% set sparePower = feedIn + batteryCharging %}
        {% set bc = (feedIn > -100) and ((alreadyOn==false and load < 3500) or (alreadyOn==true and load < 5500)) %}
        {{ bc and ((pv > 3000 and alreadyOn==false and sparePower > 3000 ) 
                or (pv > 3000 and alreadyOn==true  and sparePower >  800 ) 
                or (pv > 2600 and alreadyOn==false and sparePower > 2600 and batteryLevel >  85 ) 
                or (pv > 2600 and alreadyOn==true  and sparePower >  400 and batteryLevel >= 85 ) 
                or (pv > 2200 and alreadyOn==false and sparePower > 2200 and batteryLevel >  90 ) 
                or (pv > 2200 and alreadyOn==true  and sparePower >  100 and batteryLevel >= 90 ) 
                or (pv >  300 and alreadyOn==false and sparePower >  300 and batteryLevel >  93 ) 
                or (pv >  300 and alreadyOn==true                        and batteryLevel >= 93 )) }}


  - binary_sensor:
    - name: "Request Tesla Charger"
      state: >
        {% set prioritiseEv = states('input_boolean.prioritise_ev_charging')|bool %}
        {% set immPower = states('sensor.sonoff_100168acb6_power')|float(default=0) %}
        {% set alreadyOn = is_state('switch.outdoor_lights', 'on') %}
        {% set batteryCharging = states('sensor.solax_local_battery_power_adjusted')|int %}
        {% set pv = states('sensor.solax_local_pv_output')|int %}
        {% set feedIn = states('sensor.solax_local_feedin_power')|int %}
        {% set load = states('sensor.solax_local_load_power')|int %}
        {% set batteryLevel = states('sensor.solax_local_battery_soc')|int %}
        {% set sparePower = feedIn + batteryCharging %}
        {# (feedIn > -100) and #}
        {% set bc = (feedIn > -250 and sparePower > -1000) and ((alreadyOn==false and load < 3500) or (alreadyOn==true and load < 5500) or (prioritiseEv==true and immPower > 2000 and load < 5500)) %}
        {{ bc and ((pv > 3000 and alreadyOn==false and sparePower > 3000 )
                or (pv > 3000 and alreadyOn==true  and sparePower >  600 ) 
                or (pv > 2500 and alreadyOn==false and prioritiseEv==true and batteryLevel >  35) 
                or (pv > 2500 and alreadyOn==true  and prioritiseEv==true and batteryLevel >= 30) 
                or (pv > 2200 and alreadyOn==false and sparePower > 0     and batteryLevel >  80 ) 
                or (pv > 2200 and alreadyOn==true  and sparePower > -500  and batteryLevel >= 75 ) 
                or (pv > 1600 and alreadyOn==false and sparePower > 0     and batteryLevel >  85 ) 
                or (pv > 1600 and alreadyOn==true  and sparePower > -250  and batteryLevel >= 80 ) 
                or (pv > 1000 and alreadyOn==false and sparePower > 0     and batteryLevel >  92 ) 
                or (pv > 1000 and alreadyOn==true  and sparePower > 0     and batteryLevel >= 90 )) }}


#    - name: "Solax Cloud Grid Power in"
#      state: >
#        {% set attr = state_attr('sensor.solax_rest_cloud', 'feedinpower') %}
#        {{ (0 - attr) if is_number(attr) and (attr|float < 0) else 0 }}
#      unit_of_measurement: "W"
#      unique_id: solax_14
#      icon: mdi:transmission-tower

#    - name: "Solax Cloud Grid Power out"
#      state: >
#        {% set attr = state_attr('sensor.solax_rest_cloud', 'feedinpower') %}
#        {{ attr if is_number(attr) and (attr|float > 0) else 0 }}
#      unit_of_measurement: "W"
#      unique_id: solax_15
#      icon: mdi:transmission-tower


    # Battery in power (charing)
#    - name: "Solax Cloud Battery Use In"
#      unique_id: solax_cloud_battery_use_in
#      state: >
#        {% set batAdj = states('sensor.solax_cloud_battery_adjusted')|int(default=0) %}
#        {{ batAdj if is_number(batAdj) and (batAdj|int > 0) else 0 }}
#      unit_of_measurement: "W"
#      icon: mdi:battery

    # Battery out power (discharging)
#    - name: "Solax Cloud Battery Use Out"
#      unique_id: solax_cloud_battery_use_out
#      state: >
#        {% set batAdj = states('sensor.solax_cloud_battery_adjusted')|int(default=0) %}
#        {{ (0 - batAdj) if is_number(batAdj) and (batAdj|int < 0) else 0 }}
#      unit_of_measurement: "W"
#      icon: mdi:battery

    # Battery use
#    - name: "Solax Cloud Battery Use"
#      unique_id: solax_cloud_battery_use
#      state: >
#       {{ state_attr('sensor.solax_rest_cloud', 'batPower') }}
#      unit_of_measurement: "W"
#      device_class: energy
#      state_class: measurement
#      icon: mdi:battery



  - binary_sensor:
    # Logic divided into base conditions (bc) that apply regardless, and battery/solar specific
    - name: "Request 3kW Immersion"
      state: >
        {% set alreadyOn = is_state('switch.sonoff_100168acb6', 'on')|int(default=0)  %}
        {% set heatingPower = states('sensor.sonoff_100168acb6_power')|float(default=0) %}
        {% set batteryCharging = states('sensor.solax_local_battery_power_adjusted')|int %}
        {% set pv = states('sensor.solax_local_pv_output')|int %}
        {% set feedIn = states('sensor.solax_local_feedin_power')|int %}
        {% set load = states('sensor.solax_local_load_power')|int %}
        {% set batteryLevel = states('sensor.solax_local_battery_soc')|int %}
        {% set sparePower = feedIn + batteryCharging %}
        {% set bc = (feedIn > -200) and (
                 (alreadyOn==false and load < 2500) 
              or (alreadyOn==true  and load < 5500)) %}
        {% set bc2 = (feedIn > -200) and (
                 ((alreadyOn==false or heatingPower < 1000) and load < 2500) 
              or (alreadyOn==true and heatingPower > 1000 and load < 5500)) %}
        {# 
        (pv > 3400 and alreadyOn==false and sparePower > 3200) 
                or (pv > 3400 and alreadyOn==true  and sparePower > 100)
                or (pv > 2800 and alreadyOn==false and batteryLevel >  55) 
                or (pv > 2800 and alreadyOn==true  and batteryLevel >= 50)
                or (pv > 2000 and alreadyOn==false and batteryLevel >  65) 
                or (pv > 2000 and alreadyOn==true  and batteryLevel >= 60)
                or (pv > 1400 and alreadyOn==false and batteryLevel >  75) 
                or (pv > 1400 and alreadyOn==true  and batteryLevel >= 70)
                or (pv >  800 and alreadyOn==false and batteryLevel >  85)
                or (pv >  800 and alreadyOn==true  and batteryLevel >= 80)                
                or 
        #}

        {{ bc and ((pv >  500 and alreadyOn==false and batteryLevel >  93)
                or (pv >  500 and alreadyOn==true  and batteryLevel >= 90)) }}



  evening_immersion_target:
    name: evening_immersion_target
    unit_of_measurement: 'kWh'
    initial: 2.0
    min: 0.0
    max: 5.0
    step: 0.1

  night_min_immersion_target:
    name: night_min_immersion_target
    unit_of_measurement: 'kWh'
    initial: 3
    min: 0
    max: 8
    step: 0.1

  night_immersion_target:
    name: night_immersion_target
    unit_of_measurement: 'kWh'
    initial: 9
    min: 0
    max: 12
    step: 0.1



  # Min 10 (to avoid going up to quickly), step every 5min to easier use
  ground_floor_temp_target_min_cycle_duration:
    name: ground_floor_temp_target_min_cycle_duration
    initial: 30
    min: 1
    max: 60
    step: 1

  ground_floor_temp_offset:
    name: ground_floor_temp_offset
    initial: 0.0
    min: -2.0
    max: 2.0
    step: 0.1
    unit_of_measurement: "째C"

  ground_floor_temp_target_margin:
    name: ground_floor_temp_target_margin
    initial: 0.5
    min: 0.1
    max: 1.0
    step: 0.1
    unit_of_measurement: "째C"

  # Copied over from Tado thermostat
  ground_floor_temp_target:
    name: ground_floor_temp_target
    initial: 21.5
    min: 18.0
    max: 22.5
    step: 0.1
    unit_of_measurement: "째C"

  # Target Daikin temperature
  living_room_temp_target:
    name: living_room_temp_target
    initial: 21.0
    min: 15.5
    max: 23.0
    step: 0.5
    unit_of_measurement: "째C"
  