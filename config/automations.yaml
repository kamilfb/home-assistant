- id: '1000000000001'
  alias: "Sinks - Zappi - Battery getting full"
  mode: single
  trigger:
    - platform: numeric_state
      entity_id: sensor.solax_local_battery_soc
      for:
        hours: 0
        minutes: 1
        seconds: 0
      above: 90
  condition: []
  action:
    - device_id: bd40256cc856744ab22471c444adf02e
      domain: number
      entity_id: number.myenergi_zappi_22670748_minimum_green_level
      type: set_value
      value: 40
    - type: turn_on
      device_id: 81156b52303e441076758ad3e9620bfa
      entity_id: switch.octopus_bump_charge
      domain: switch

- id: '1000000000002'
  alias: "Sinks - Zappi - Battery has capacity"
  mode: single
  trigger:
    - platform: numeric_state
      entity_id: sensor.solax_local_battery_soc
      for:
        hours: 0
        minutes: 1
        seconds: 0
      below: 90
  condition: []
  action:
    - device_id: bd40256cc856744ab22471c444adf02e
      domain: number
      entity_id: number.myenergi_zappi_22670748_minimum_green_level
      type: set_value
      value: 100

- id: "1022226654411"
  alias: Air Conditioning - Follow Tado settings
  description: "Follows on/off state plus temperature target from Ground Floor Tado"
  trigger:
    - platform: state
      entity_id:
        - climate.ground_floor
      attribute: temperature
    - platform: state
      entity_id:
        - climate.ground_floor
  condition: []
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.living_room_temp_target
      value: >
        {% set currentLvTarget = states('input_number.living_room_temp_target')|float %}
        {% set currentGfTarget = states('input_number.ground_floor_temp_target')|float %}
        {% set gfTempTarget  = state_attr('climate.ground_floor', 'temperature')|float %}
        {% set lvTempTarget = (gfTempTarget | round(1, 'half', 0)) - 2.0 if (gfTempTarget != currentGfTarget) else currentLvTarget %}
        {{ lvTempTarget }}  
  - service: input_number.set_value
    data_template:
      entity_id: input_number.ground_floor_temp_target
      value: >
        {% set gfTempTarget  = state_attr('climate.ground_floor', 'temperature')|float %}
        {{ gfTempTarget }}
  - service: input_select.select_option
    target:
      entity_id: input_select.living_room_hvac_mode
    data:
      option: "{{ 'off' if (states('climate.ground_floor') == 'off' or state_attr('climate.ground_floor', 'temperature')|float <=18 ) else 'heat' }}"
    
  mode: single

- id: "1022226657321"
  alias: Air Conditioning - Adjust target temperature
  description: "Adjusts the target temperature to keep it between the configured range (~21.0/21.5)"
  trigger:
  - platform: time_pattern
    minutes: "/2"
  - platform: state
    entity_id:
    - input_number.ground_floor_temp_target
    - input_number.ground_floor_temp_target_margin
    - input_number.ground_floor_temp_target_min_cycle_duration
    for:
      hours: 0
      minutes: 0
      seconds: 30
  condition: 
  - condition: time
    after: "03:30:00"
    before: "21:30:00"
  # Before adjusting, make sure it is in heating mode, and targets are synced first 
  - condition: template
    value_template: >-
      {{ (states('climate.lounge') == 'heat') and (state_attr('climate.lounge', 'temperature')|float == states('input_number.living_room_temp_target')|float) }}
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.living_room_temp_target
      value: >
        {#% set lrAcTempTarget  = state_attr('climate.lounge', 'temperature')|float %#}
        {% set lrTempTarget  = states('input_number.living_room_temp_target')|float %}
        {% set gfTemp        = states('sensor.ground_floor_temperature')|float %}
        {% set gfTempAvg     = states('sensor.ground_floor_temperature_30min_average')|float %}
        {# Negative "gf30minDelta" means temp is dropping #}
        {% set gf30minDelta  = gfTemp - gfTempAvg %}
        {% set manualTempTarget = states('input_number.ground_floor_temp_target')|float %}
        {% set manualTempMargin = states('input_number.ground_floor_temp_target_margin')|float %}
        {% set manualTempCycle  = states('input_number.ground_floor_temp_target_min_cycle_duration')|int %}
        {% set lowTarget        = manualTempTarget - manualTempMargin %}
        {% set highTarget       = manualTempTarget + manualTempMargin %}
        {# Avoid short cycling (after start-up, manual change or auto-adjustment) #}
        {% set targetlastChanged = (as_timestamp(now()) - as_timestamp(states.input_number.living_room_temp_target.last_changed)|int)/60 %}
        {% set statuslastChanged = (as_timestamp(now()) - as_timestamp(states.climate.lounge.last_changed)|int)/60 %}
        {% set canAdjust = true if (targetlastChanged > manualTempCycle and statuslastChanged > manualTempCycle/2) else false %}
        {% set tempTarget = lrTempTarget %}
        {# Change the target if either outside of the temperature brackets already, or expecting this with the delta applied #}
        {# In rare scenarios when the temp is rising fast, if alread seeing double the high target allow reducing temp in half the cycle time #}
        {% set tempTarget = tempTarget + 0.5 if ((gfTemp <= lowTarget  or gfTemp + gf30minDelta/2 <= lowTarget)  and canAdjust) else tempTarget %}
        {% set tempTarget = tempTarget - 0.5 if ((gfTemp >= highTarget or gfTemp + gf30minDelta/2 >= highTarget) and canAdjust) 
                                             or ((gfTemp + gf30minDelta >= highTarget + manualTempMargin*2) and targetlastChanged > manualTempCycle/2) else tempTarget %}
        {{ tempTarget }}
  mode: single

# Update AC target temperature if 'living_room_temp_target' has changed (on-change) or refresh from current status (re-sync) in case unit becomes unavailable
- id: "1022226653322"
  alias: Air Conditioning - Update living room target temperature
  description: "Updates the target temperature of the living room unit (climate.lounge) based on 'living_room_temp_target' input"
  trigger:
  - platform: time_pattern
    minutes: "/10"  
  - platform: state
    entity_id:
    - input_number.living_room_temp_target
    for:
      hours: 0
      minutes: 0
      seconds: 15
  action:
  - service: climate.set_temperature
    data_template:
      entity_id: climate.lounge
      temperature: "{{ states('input_number.living_room_temp_target') }}"
  mode: single

# Update AC on/off state if HVAC mode has changed (on-change) or refresh from current status (re-sync) in case unit becomes unavailable
- id: "1022226653399"
  alias: Air Conditioning - Update on/off state
  description: "Updates the on/off state of the living room unit (climate.lounge) based on 'living_room_hvac_mode' input"
  trigger:
  - platform: time_pattern
    minutes: "/10"  
  - platform: state
    entity_id:
    - input_select.living_room_hvac_mode
    for:
      hours: 0
      minutes: 0
      seconds: 15
  action:
  - service: climate.set_hvac_mode
    data_template:
      entity_id: climate.lounge
      hvac_mode: "{{ states('input_select.living_room_hvac_mode') }}"
  mode: single

- id: '1105783920393'
  alias: Sinks - Hot Water - Start immersion heater (excess solar)
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.request_3kw_immersion
    for:
      hours: 0
      minutes: 1
      seconds: 0
    to: "on"    
  condition: 
  - condition: time
    after: "07:00:00"
    before: "19:00:00"   
  action:
  - repeat:
      sequence:
      - type: turn_on
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == 'on' or repeat.index == 3 }}
  mode: single

- id: '11991293920222'
  alias: Sinks - Hot Water - Pause immersion heater (temperature reached)
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.sonoff_100168acb6_power
    for:
      hours: 0
      minutes: 0
      seconds: 30
    below: 100
  condition:
  - condition: state
    entity_id: switch.sonoff_100168acb6
    state: "on"
    for:
      hours: 0
      minutes: 0
      seconds: 30
  - condition: time
    after: "07:30:00"
    before: "18:30:00"   
  action:
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.sinks_put_3kw_immersion_heater_excess_solar
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.sonoff_100168acb6
  - delay:
      hours: 0
      minutes: 60
      seconds: 0
      milliseconds: 0
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.sinks_put_3kw_immersion_heater_excess_solar
  mode: single

- id: '11001293920394'
  alias: Sinks - Hot Water - Run immersion heater (evening top-up in case of low solar)
  description: ''
  trigger:
  - platform: time
    at: "19:35:00" 
  condition:
  - condition: template
    # Only turn on immersion if usage so far is less than the target
    value_template: >-
      {{ states('sensor.daily_hot_water_peak')|float + states('sensor.daily_hot_water_solar')|float < states('input_number.evening_immersion_target')|float }}
  action:
  - repeat:
      sequence:
      - type: turn_on
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == 'on' or repeat.index == 3 }}
  - repeat:
      sequence:
      - delay:
          hours: 0
          minutes: 1
          seconds: 0
      until:
      - condition: template
        # Keep it in on state until at least 1kWh 
        value_template: >-
            {{ states('sensor.daily_hot_water_peak')|float + states('sensor.daily_hot_water_solar')|float >= states('input_number.evening_immersion_target')|float }}
  - repeat:
      sequence:
      - type: turn_off
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == 'off' or repeat.index == 3 }}
  mode: single

- id: '1105783920394'
  alias: Sinks - Hot Water - Start immersion heater (night start)
  description: ''
  trigger:
  - platform: time
    at: "00:35:00"
  - platform: time
    at: "01:35:00"
  - platform: time
    at: "02:35:00"      
  - platform: time
    at: "03:35:00"  
  - platform: time
    at: "04:35:00"   
  condition:
  - condition: template
    # Only turn on immersion if usage so far is less than the target
    value_template: >-
      {{ states('sensor.daily_hot_water_offpeak')|float < states('input_number.night_immersion_target')|float }}
  action:
  - repeat:
      sequence:
      - type: turn_on
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == 'on' or repeat.index == 3 }}
  mode: single

- id: '1029486719232'
  alias: Sinks - Hot Water - Stop immersion heater (max temp idle time or night target reached)
  description: Turn off completely if thermostat starts turning off the heating (hot enough) or target achieved
  trigger:
  - platform: numeric_state
    entity_id: sensor.sonoff_100168acb6_power
    for:
      seconds: "{{ states('input_number.max_temp_idle_seconds')|int }}"
    below: 1000
  - platform: template
    value_template: >-
      {{ states('sensor.daily_hot_water_offpeak')|float >= states('input_number.night_immersion_target')|float }}
  condition: 
  - condition: time
    after: "00:30:00"
    before: "05:30:00"    
  action:
  - repeat:
      sequence:
      - type: turn_off
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == 'off' or repeat.index == 3 }}
  mode: single

- id: '1283957837432'
  alias: Sinks - Hot Water - Stop immersion heater (low solar or night end)
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.request_3kw_immersion
    for:
      hours: 0
      minutes: 0
      seconds: 45
    to: "off"
  - platform: time
    at: "01:25:00"      
  - platform: time
    at: "02:25:00"      
  - platform: time
    at: "03:25:00"         
  - platform: time
    at: "04:25:00"       
  - platform: time
    at: "05:25:00"
  - platform: time
    at: "19:15:00"   
  condition: 
  - condition: time
    after: "01:15:00"
    before: "19:15:00"   
  action:
  - repeat:
      sequence:
      - type: turn_off
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == 'off' or repeat.index == 3 }}
  mode: single

- id: "1302984839333"
  alias: Tariffs - Set 'solar' tariff for tracking usage from PV
  description: "Set some meters to use 'solar' tariff"
  trigger:
  - platform: sun
    event: sunrise
    offset: 0
    variables:
      tariff: >- 
        {{ "solar" if today_at('05:30') <= now() else "offpeak" }}
  - platform: sun
    event: sunset
    offset: 0
    variables:
      tariff: peak
  - platform: time
    at: "23:30:00"
    variables:
      tariff: offpeak
  - platform: time
    at: "05:30:00"
    variables:
      tariff: >- 
        {{ "peak" if (is_state('sun.sun', "below_horizon")) else "solar" }}
  action:     
  - service: select.select_option
    target:
      entity_id: select.monthly_hot_water
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.daily_hot_water
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.daily_tesla_charging
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.monthly_tesla_charging
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.daily_zappi_charging
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.monthly_zappi_charging
    data:
      option: "{{ tariff }}"

# Tariff selection for meters (default to offpeak for manual runs)
- id: "1302984839203"
  alias: Tariffs - Switch electricity tariff
  description: "Set electricity tariff for utility sensor"
  variables:
    tariff: offpeak
  trigger:
  - platform: time
    at: "23:30:00"
    variables:
      tariff: offpeak
  - platform: time
    at: "05:30:00"
    variables:
      tariff: peak
  condition: []
  action:
  - service: select.select_option
    target:
      entity_id: select.daily_grid
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.monthly_grid
    data:
      option: "{{ tariff }}"      
  - service: input_number.set_value
    target:
      entity_id: input_number.electricity_tariff_cost
    data:
      value: >
        {% set cost = dict(peak=0.2978, offpeak=0.075) %}
        {{ cost[tariff] }}
  mode: single

# Keep refreshing the energy readings for manual inspection and more snappy automations
- id: "1019847854392"
  alias: Inverter - Refresh local energy readings
  description: "Updates local inverter readings"
  trigger:
  - platform: time_pattern
    seconds: "/10"
  condition: 
  - condition: time
    after: "06:00:00"
    before: "22:00:00"
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.solax_rest_local
  mode: single

# Keep refreshing the solax settings for manual inspection and more snappy automations
- id: "1019845554393"
  alias: Inverter - Refresh local energy settings
  description: "Updates local inverter settings"
  trigger:
  - platform: time_pattern
    minutes: "/5"
  condition: 
  - condition: time
    after: "09:00:00"
    before: "22:00:00"
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.solax_rest_local_settings
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.solax_local_settings_read
    data:
      timestamp: "{{ now().timestamp() }}"
  mode: single

- id: "2000"
  alias: Octopus - Saving Session joiner
  description: Automatically join Octopus Saving Session Events
  mode: single
  trigger:
    - platform: event
      event_type: octopus_energy_new_octoplus_saving_session
  condition: []
  action:
    - service: octopus_energy.join_octoplus_saving_session_event
      data:
        event_code: '{{ trigger.event.data["event_code"] }}'
      target:
        entity_id: event.octopus_energy_a_5790678f_octoplus_saving_session_events
    - service: persistent_notification.create
      data:
        title: "Octopus Saving Sessions Updated"
        message: >
          Joined new Octopus Energy saving session. It starts at {{ trigger.event.data["event_start"].strftime('%H:%M') }} on {{ trigger.event.data["event_start"].day }}/{{ trigger.event.data["event_start"].month }} 
  mode: single

- id: "2001"
  alias: Octopus - Is there a Saving Session today?
  description: 'Sets the today flag and copies over the start time - this in turn should trigger the 3001 automation for pre-charging'
  # Trigger every hour or when a new event is published (e.g. surprise session)
  trigger:
  - platform: time_pattern
    minutes: "/30"
  - platform: state
    entity_id:
    - binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions
    attribute: next_joined_event_start
  action:
  - service: input_select.select_option
    target:
      entity_id: input_select.saving_session_today
    data:
      # Could simplif and reuse the date calculated in the next step instead
      option: >
        {% set current_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'current_joined_event_start') %}
        {% set next_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'next_joined_event_start') %}
        {% set upcoming_event = current_event if (current_event != None) else next_event %}
        {{ 'yes' if (upcoming_event != None and upcoming_event.strftime('%j') == now().strftime('%j')) else 'no' }}
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.saving_session_start
    data:
      datetime: >
        {% set current_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'current_joined_event_start') %}
        {% set next_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'next_joined_event_start') %}
        {% set upcoming_event = current_event if (current_event != None) else next_event %}
        {{ (now() + timedelta(days=7)).strftime('%Y-%m-%d 00:00:00') if (upcoming_event == None) else upcoming_event }}           
  mode: single

- id: "3001"
  alias: Battery - Saving Sessions - Request full charge
  description: "Stops allowed discharge and allows for charging to target"
  trigger:
  - platform: time_pattern
    minutes: "/15"
  - platform: state
    entity_id:
    - input_datetime.saving_session_start
    - input_select.saving_session_today
    for:
      hours: 0
      minutes: 0
      seconds: 45
  condition:
  - condition: template
    value_template: >-
      {{ states('sensor.solax_local_battery_chd2_enabled')|bool==false 
          and states('input_select.saving_session_today') == 'yes' 
          and states('input_datetime.saving_session_start') != None }}    
  action:
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_period2_enable
        data:
          # 1 = enabled, 0 = disabled
          enabled: >
            {{ 1 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_forced_charge_stop2
        data:
          # Switch off forced charge 1 minute before session start
          value: >-
            {% set end_time = as_datetime(state_attr('input_datetime.saving_session_start', 'timestamp') - 60) %}
            {{ end_time.hour + end_time.minute * 256 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('sensor.solax_local_battery_chd2_enabled')|bool==true or repeat.index == 3 }}
  mode: single

- id: "3003"
  alias: Battery - Saving Sessions - Enable forced discharge
  description: "Maximise export by forcing battery discharge"
  trigger:
  - platform: time_pattern
    minutes: "/1"    
  condition: 
  - condition: template
    value_template: >-
      {{ states('input_select.saving_session_today') == 'yes' and as_datetime(states('input_datetime.saving_session_start')).timestamp() < now().timestamp() }}    
  action:
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_inverter_mode
        data:
          # 0: self use, 1: feed in priority, 2: back up, 3: manual
          value: >
            {{ 3 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_manual_mode_behaviour
        data:
          # 0: do nothing, 1: forced charge, 2: forced discharge
          value: >
            {{ 2 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ (states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Forced Discharge') or repeat.index == 3 }}
  mode: single

- id: "3005"
  alias: Battery - Saving Sessions - Enable automations
  description: "Enable pre-charging and forced discharge automations"
  trigger:
  - platform: state
    entity_id:
      - input_select.saving_session_today
    from: "no"
    to: "yes"
  action:
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.battery_saving_sessions_enable_forced_discharge
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.battery_enable_forced_charge_before_saving_session
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.battery_saving_sessions_return_to_self_use
  mode: single

- id: "3006"
  alias: Battery - Saving Sessions - Disable automations
  description: "Enable pre-charging and forced discharge automations"
  trigger:
  - platform: state
    entity_id:
      - input_select.saving_session_today
    from: "yes"
    to: "no"   
    for:
      hours: 0
      minutes: 5
      seconds: 0
  action:
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_saving_sessions_enable_forced_discharge
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_enable_forced_charge_before_saving_session
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_saving_sessions_return_to_self_use
  mode: single

- id: "3008"
  alias: Battery - Saving Sessions - Return to Self-Use
  description: "Stop forced discharge and return to normal operation"
  # Go back to normal operation if the battery is empty (managed to discharge everything) or the session has ended
  trigger:
  - platform: numeric_state
    entity_id: sensor.solax_local_battery_soc
    below: 11
    for:
      hours: 0
      minutes: 5
      seconds: 0
  - platform: state
    entity_id:
      - binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions
    from: "on"
    to: "off"
    for:
      hours: 0
      minutes: 1
      seconds: 0
  condition: 
  - condition: template
    value_template: >-
      {{ (states('sensor.solax_local_inverter_mode') == 'Manual' or states('sensor.solax_local_battery_chd2_enabled')|bool==true) }}    
  action:
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_inverter_mode
        data:
          # 0: self use, 1: feed in priority, 2: back up, 3: manual
          value: >
            {{ 0 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_period2_enable
        data:
          # 1 = enabled, 0 = disabled
          enabled: >
            {{ 0 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0    
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ (states('sensor.solax_local_battery_chd2_enabled')|bool==false and states('sensor.solax_local_inverter_mode') == 'Self Use') or repeat.index == 3 }}
  mode: single