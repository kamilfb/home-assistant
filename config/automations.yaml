- id: "1302984839333"
  alias: Tariffs - Set 'solar' tariff for tracking usage from PV
  description: "Set some meters to use 'solar' tariff"
  trigger:
  - platform: sun
    event: sunrise
    offset: 0
    variables:
      tariff: >- 
        {{ "solar" if today_at('05:30') <= now() else "offpeak" }}
  - platform: sun
    event: sunset
    offset: 0
    variables:
      tariff: peak
  - platform: time
    at: "23:30:00"
    variables:
      tariff: offpeak
  - platform: time
    at: "05:30:00"
    variables:
      tariff: >- 
        {{ "peak" if (is_state('sun.sun', "below_horizon")) else "solar" }}
  action:     
  - service: select.select_option
    target:
      entity_id: select.monthly_hot_water
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.daily_hot_water
    data:
      option: "{{ tariff }}"

# Tariff selection for meters (default to peak for manual runs)
- id: "1302984839203"
  alias: Tariffs - Switch electricity tariff
  description: "Set electricity tariff for utility sensor"
  variables:
    tariff: peak
  trigger:
  - platform: time
    at: "23:30:00"
    variables:
      tariff: offpeak
  - platform: time
    at: "05:30:00"
    variables:
      tariff: peak
  condition: []
  action:
  - service: select.select_option
    target:
      entity_id: select.daily_grid
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.monthly_grid
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.monthly_a2w_usage_hot_water_tou
    data:
      option: "{{ tariff }}"   
  - service: select.select_option
    target:
      entity_id: select.monthly_a2w_usage_space_heating_tou
    data:
      option: "{{ tariff }}"   
  - service: input_number.set_value
    target:
      entity_id: input_number.electricity_tariff_cost
    data:
      value: >
        {% set cost = dict(peak=0.2278, offpeak=0.07) %}
        {{ cost[tariff] }}
  mode: single

- id: "5000"
  alias: 'Heat Pump - Get Operaning Mode (Hot Water vs Space Heating)'
  trigger:
  - platform: state
    entity_id: binary_sensor.ASHP_DHW_On
  action:
  - service: select.select_option
    target:
      entity_id:
      - select.daily_a2w_usage
      - select.daily_a2w_output
      - select.monthly_a2w_usage
      - select.monthly_a2w_output
    data:
      option: >
        {% if is_state('binary_sensor.ASHP_DHW_On', 'on') %}
          hot_water
        {% else %}
          space_heating
        {% endif %}
  mode: single

- id: "5001"
  alias: "Hot Water - Set lower daytime hot water temp"
  mode: single
  trigger:
    - platform: time
      at: "11:55:00"
    - platform: time
      at: "14:05:00"     
  condition: []
  action:
    - repeat:
        sequence:
          - service: water_heater.set_temperature
            metadata: {}
            data:
              temperature: 46
            target:
              entity_id: water_heater.domek_domestic_hot_water_0
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
              milliseconds: 0
        until:
          - condition: numeric_state
            entity_id: sensor.domek_domestic_hot_water_0_setpoint
            below: 50

- id: "5002"
  alias: "Hot Water - Set higher nighttime hot water temp"
  mode: single
  trigger:
    - platform: time
      at: "22:30:00"  
    - platform: time
      at: "23:30:00"
    - platform: time
      at: "00:25:00"      
  condition: []
  action:
    - repeat:
        sequence:
          - service: water_heater.set_temperature
            metadata: {}
            data:
              temperature: 56
            target:
              entity_id: water_heater.domek_domestic_hot_water_0
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
              milliseconds: 0
        until:
          - condition: numeric_state
            entity_id: sensor.domek_domestic_hot_water_0_setpoint
            above: 50

# Keep refreshing the energy readings for manual inspection and more snappy automations
- id: "1019847854392"
  alias: Inverter - Refresh local energy readings
  description: "Updates local inverter readings"
  trigger:
  - platform: time_pattern
    seconds: "/15"
  condition: 
  - condition: time
    after: "06:00:00"
    before: "22:00:00"
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.solax_rest_local
  mode: single

# Keep refreshing the solax settings for manual inspection and more snappy automations
- id: "1019845554393"
  alias: Inverter - Refresh local energy settings
  description: "Updates local inverter settings"
  trigger:
  - platform: time_pattern
    minutes: "/15"
  condition: 
  - condition: time
    after: "09:00:00"
    before: "22:00:00"
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.solax_rest_local_settings
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.solax_local_settings_read
    data:
      timestamp: "{{ now().timestamp() }}"
  mode: single

- id: "2000"
  alias: Octopus - Saving Session joiner
  description: Automatically join Octopus Saving Session Events
  mode: single
  trigger:
    - platform: event
      event_type: octopus_energy_new_octoplus_saving_session
  condition: []
  action:
    - service: octopus_energy.join_octoplus_saving_session_event
      data:
        event_code: '{{ trigger.event.data["event_code"] }}'
      target:
        entity_id: event.octopus_energy_a_5790678f_octoplus_saving_session_events
    - service: persistent_notification.create
      data:
        title: "Octopus Saving Sessions Updated"
        message: >
          Joined new Octopus Energy saving session. It starts at {{ trigger.event.data["event_start"].strftime('%H:%M') }} on {{ trigger.event.data["event_start"].day }}/{{ trigger.event.data["event_start"].month }} 
  mode: single

- id: "2001"
  alias: Octopus - Is there a Saving Session today?
  description: 'Sets the today flag and copies over the start time - this in turn should trigger the 3001 automation for pre-charging'
  # Trigger every hour or when a new event is published (e.g. surprise session)
  trigger:
  - platform: time_pattern
    minutes: "/30"
  - platform: state
    entity_id:
    - binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions
  - platform: state
    entity_id:
    - binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions
    attribute: next_joined_event_start
  action:
  - service: input_select.select_option
    target:
      entity_id: input_select.saving_session_today
    data:
      # Could simplif and reuse the date calculated in the next step instead
      option: >
        {% set current_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'current_joined_event_start') %}
        {% set next_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'next_joined_event_start') %}
        {% set upcoming_event = current_event if (current_event != None) else next_event %}
        {{ 'yes' if (upcoming_event != None and upcoming_event.strftime('%j') == now().strftime('%j')) else 'no' }}
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.saving_session_start
    data:
      datetime: >
        {% set current_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'current_joined_event_start') %}
        {% set next_event = state_attr('binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions', 'next_joined_event_start') %}
        {% set upcoming_event = current_event if (current_event != None) else next_event %}
        {{ (now() + timedelta(days=7)).strftime('%Y-%m-%d 00:00:00') if (upcoming_event == None) else upcoming_event }}           
  mode: single

- id: "3005"
  alias: Battery - Saving Sessions - Enable automations
  description: "Enable pre-charging and forced discharge automations"
  trigger:
  - platform: state
    entity_id:
      - input_select.saving_session_today
    from: "no"
    to: "yes"
  action:
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.battery_enable_forced_charge_before_saving_session
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.battery_saving_sessions_enable_forced_discharge
  mode: single
  
- id: "3001"
  alias: Battery - Saving Sessions - Request full charge
  description: "Stops allowed discharge and allows for charging to target"
  trigger:
  - platform: time_pattern
    minutes: "/15"
  - platform: state
    entity_id:
    - input_datetime.saving_session_start
    - input_select.saving_session_today
    for:
      hours: 0
      minutes: 0
      seconds: 45
  condition:
  - condition: template
    value_template: >-
      {{ states('sensor.solax_local_battery_chd2_enabled')|bool==false 
          and states('input_select.saving_session_today') == 'yes' 
          and states('input_datetime.saving_session_start') != None }}    
  action:
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_period2_enable
        data:
          # 1 = enabled, 0 = disabled
          enabled: >
            {{ 1 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_forced_charge_stop2
        data:
          # Switch off forced charge 1 minute before session start
          value: >-
            {% set end_time = as_datetime(state_attr('input_datetime.saving_session_start', 'timestamp') - 60) %}
            {{ end_time.hour + end_time.minute * 256 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target (second period and time)
        value_template: >-
            {% set end_time = as_datetime(state_attr('input_datetime.saving_session_start', 'timestamp') - 60).strftime('%H:%M') %}
            {{ (states('sensor.solax_local_battery_chd2_enabled')|bool==true 
                and states('sensor.solax_local_battery_setting_stop_charge_2') == end_time)
                or repeat.index == 3 }}
  mode: single

- id: "3003"
  alias: Battery - Saving Sessions - Enable forced discharge
  description: "Maximise export by forcing battery discharge"
  trigger:
  - platform: time_pattern
    minutes: "/1"    
  condition: 
  - condition: template
    value_template: >-
      {{ states('sensor.solax_local_inverter_mode') == 'Self Use' 
          and states('input_select.saving_session_today') == 'yes' 
          and as_datetime(states('input_datetime.saving_session_start')).timestamp() < now().timestamp() }}    
  action:
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_enable_forced_charge_before_saving_session
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.battery_saving_sessions_return_to_self_use
  # Stop Zappi from charging the car as there will be energy send to the grid
  - device_id: bd40256cc856744ab22471c444adf02e
    domain: select
    entity_id: b6ff0dc9292d837d75a1367990331fe7
    type: select_option
    option: Stopped
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_inverter_mode
        data:
          # 0: self use, 1: feed in priority, 2: back up, 3: manual
          value: >
            {{ 3 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_manual_mode_behaviour
        data:
          # 0: do nothing, 1: forced charge, 2: forced discharge
          value: >
            {{ 2 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ (states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Forced Discharge') or repeat.index == 3 }}
  mode: single

- id: "3006"
  alias: Battery - Saving Sessions - Disable automations
  description: "A few minutes after the event (current/next get updated), disable most of the automations related to saving sessions"
  trigger:
  - platform: state
    entity_id:
      - input_select.saving_session_today
    from: "yes"
    to: "no"   
    for:
      hours: 0
      minutes: 5
      seconds: 0
  action:
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_saving_sessions_enable_forced_discharge
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_enable_forced_charge_before_saving_session
  - service: automation.turn_off
    data:
      stop_actions: false
    target:
      entity_id: automation.battery_saving_sessions_return_to_self_use
  mode: single

- id: "3008"
  alias: Battery - Saving Sessions - Return to Self-Use
  description: "Stop forced discharge and return to normal operation"
  # Go back to normal operation if the battery is empty (managed to discharge everything) or the session has ended
  trigger:
  - platform: numeric_state
    entity_id: sensor.solax_local_battery_soc
    below: 11
    for:
      hours: 0
      minutes: 3
      seconds: 0
  - platform: state
    entity_id:
      - binary_sensor.octopus_energy_a_5790678f_octoplus_saving_sessions
    from: "on"
    to: "off"
    for:
      hours: 0
      minutes: 0
      seconds: 30
  condition: 
  - condition: template
    value_template: >-
      {{ (states('sensor.solax_local_inverter_mode') == 'Manual' or states('sensor.solax_local_battery_chd2_enabled')|bool==true) }}    
  action:   
  - service: automation.turn_off
    data:
      stop_actions: true
    target:
      entity_id: automation.battery_saving_sessions_enable_forced_discharge
  - repeat:
      sequence:
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_inverter_mode
        data:
          # 0: self use, 1: feed in priority, 2: back up, 3: manual
          value: >
            {{ 0 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_period2_enable
        data:
          # 1 = enabled, 0 = disabled
          enabled: >
            {{ 0 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0    
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ (states('sensor.solax_local_battery_chd2_enabled')|bool==false and states('sensor.solax_local_inverter_mode') == 'Self Use') or repeat.index == 3 }}
  # Return Zappi to normal operation
  - device_id: bd40256cc856744ab22471c444adf02e
    domain: select
    entity_id: b6ff0dc9292d837d75a1367990331fe7
    type: select_option
    option: Eco+
  mode: single

- id: "3010"
  alias: Battery - Free Electricity - All On
  description: "Start all devices - Solax Battery, Zappi, Slow EV charger, Really Hot Water, Dishwasher"
  trigger: []
  action:   
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_inverter_mode
        data:
          # 0: self use, 1: feed in priority, 2: back up, 3: manual
          value: >
            {{ 3 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: rest_command.solax_local_set_manual_mode_behaviour
        data:
          # 0: do nothing, 1: forced charge, 2: forced discharge
          value: >
            {{ 1 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ (states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Forced Charge') or repeat.index == 3 }}
  # Zappi to Fast
  - device_id: bd40256cc856744ab22471c444adf02e
    domain: select
    entity_id: b6ff0dc9292d837d75a1367990331fe7
    type: select_option
    option: Fast
  # Turn on EV charger socket  
  - type: turn_on
    device_id: ea5104db6def72c74cac364dd24eb9fa
    entity_id: 308e8d77d06ed8939fa3d2c4ad1fdf35
    domain: switch  
  # Turn up hot water  
  - repeat:
      sequence:
      - service: water_heater.set_temperature
        metadata: {}
        data:
          temperature: 65
        target:
          entity_id: water_heater.domek_domestic_hot_water_0
      - delay:
          hours: 0
          minutes: 0
          seconds: 15
          milliseconds: 0
      until:
      - condition: numeric_state
        entity_id: sensor.domek_domestic_hot_water_0_setpoint
        above: 60
  # Turn on dishwasher      
  - type: turn_on
    device_id: 650c729ff7756a7f5f27339e3f3b7a07
    entity_id: 985273d7d1f8fe478006f9154e7ce105
    domain: switch      
  mode: single

- id: "8000"
  alias: "Heat Pump - Calculate New Target Temperature"
  description: "Calculates a new target temperature based on the current temperature relative to the scheduled setpoint, every 5 minutes."
  mode: single
  trigger:
    - platform: time_pattern
      minutes: "/5"
  action:
    - variables:
        current_time: "{{ now().hour * 60 + now().minute }}"
        day_name: "{{ now().strftime('%A').lower() }}"
        current_temperature: "{{ state_attr('climate.domek_zone_1_circuit_0_climate', 'current_temperature') | float }}"
        scheduled_temperature: >
          {% for slot in state_attr('climate.domek_zone_1_circuit_0_climate', 'time_program_heating')[day_name] %}
            {% if current_time >= slot.start_time and current_time < slot.end_time %}
              {{ slot.setpoint }}
            {% endif %}
          {% endfor %}
        temperature_difference: "{{ current_temperature - scheduled_temperature }}"
        # For each full 0.5°C above scheduled, reduce the target by 0.5°C.
        steps: "{{ (temperature_difference / 0.5) | int if temperature_difference >= 0.5 else 0 }}"
        new_target: >
          {% if steps > 0 %}
            {{ scheduled_temperature - (steps * 0.5) | float }}
          {% else %}
            {{ scheduled_temperature | float }}
          {% endif %}
        quick_veto_end: "{{ state_attr('climate.domek_zone_1_circuit_0_climate', 'quick_veto_end_date_time') }}"
        remaining_veto_time_minutes: >
          {% if quick_veto_end != 'unknown' %}
            {{ ((as_timestamp(quick_veto_end) - as_timestamp(now())) / 60) | round(0) }}
          {% else %}
            0
          {% endif %}
    - service: input_number.set_value
      target:
        entity_id: input_number.vaillant_new_temperature
      data:
        value: "{{ new_target | float }}"
    - service: input_number.set_value
      target:
        entity_id: input_number.vaillant_scheduled_temperature
      data:
        value: "{{ scheduled_temperature | float }}"
    - service: input_number.set_value
      target:
        entity_id: input_number.vaillant_temperature_difference
      data:
        value: "{{ temperature_difference }}"
    - service: input_number.set_value
      target:
        entity_id: input_number.vaillant_remaining_veto_minutes
      data:
        value: "{{ remaining_veto_time_minutes }}"

- id: "8001"
  alias: "Heat Pump - Apply Quick Veto with New Temperature"
  description: "Uses a quick veto to set the target temperature to the new value, every 30 minutes during daytime."
  mode: single
  trigger:
    - platform: time_pattern
      minutes: "0"
    - platform: time_pattern
      minutes: "30"
  condition:
    - condition: sun
      after: sunrise
      before: sunset
  action:
    - variables:
        quick_veto_end: "{{ state_attr('climate.domek_zone_1_circuit_0_climate', 'quick_veto_end_date_time') }}"
        remaining_veto_time_minutes: >
          {% if quick_veto_end != 'unknown' %}
            {{ ((as_timestamp(quick_veto_end) - as_timestamp(now())) / 60) | round(0) }}
          {% else %}
            0
          {% endif %}
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ remaining_veto_time_minutes < 40 }}"
          sequence:
            - service: mypyllant.set_quick_veto
              target:
                device_id: "0368cdeffae38b2400e2a1c64d48eb7f"
              data:
                temperature: "{{ states('input_number.vaillant_new_temperature') | float }}"
                duration_hours: 2
            - service: logbook.log
              data:
                name: "Heating Adjust"
                message: "Quick veto applied with new target temperature: {{ states('input_number.vaillant_new_temperature') }}"

- id: "7000"
  alias: "Camera - Solar snapshot"
  description: "Get a snap from the solar camera"
  mode: single
  triggers:
    - trigger: time_pattern
      minutes: "0" 
    - trigger: time_pattern
      minutes: "30"
  conditions:
    - condition: sun
      after: sunrise
      after_offset: "-02:00:00"
      before: sunset
      before_offset: "+02:00:00"
  actions:
    - action: blink.trigger_camera
      target:
        entity_id: camera.solar
    - action: camera.snapshot
      metadata: {}
      data:
        filename: '/media/blink_{{ now().strftime("%Y%m%d-%H%M") }}.jpg'
      target:
        entity_id: camera.solar