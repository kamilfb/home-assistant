- id: '1395837280000'
  alias: Battery - Set solar battery target level
  description: Set target battery level (charge from grid) based on anticipated solar production
  trigger:
  - platform: time
    at: "23:30:00"
  # If the forecast charges for worse, a last change to top up the battery  
  - platform: time
    at: "03:30:00"  
  condition: []
  action:
  - repeat:
      sequence:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.new_battery_target
          # Assumptions: hourly morning usage of 0.2kWh/h, battery capacity 6.2kWh, end of night tariff 04:30am, overcharging by 4-5% hence -4 of the target
          value: >
            {% set solar = states('sensor.energy_production_tomorrow') if now().hour > 12 else states('sensor.energy_production_today') %}
            {% set morningDemand = ((today_at(as_timestamp(states.sun.sun.attributes.next_rising)| timestamp_custom("%H:%M")) - today_at('04:30')).seconds/60/60*0.2/6.2*100)|round %}
            {% set minTarget = 10 + morningDemand - 4 %}
            {% set target = minTarget %} 
            {% if is_number(solar) %}
              {% set target = 92 if (solar|float <= 3) else target %}  
              {% set target = minTarget + 50 if (solar|float > 3 and solar|float <= 4) else target %}
              {% set target = minTarget + 30 if (solar|float > 4 and solar|float <= 5) else target %}
              {% set target = minTarget + 20 if (solar|float > 5 and solar|float <= 6) else target %}
              {% set target = minTarget + 15 if (solar|float > 6 and solar|float <= 7) else target %}
              {% set target = minTarget + 10 if (solar|float > 7 and solar|float <= 8) else target %}
              {% set target = minTarget +  5 if (solar|float > 8 and solar|float <= 9) else target %}
              {% set target = minTarget      if (solar|float > 9) else target %}
            {% endif %} 
            {{ target if (target > 11) else 11 }}
      - service: rest_command.solax_local_set_charge_battery_from_grid
        data:
          # Max level to 92% to reduce battery wear. Minimum to 11% plus 4% overcharge
          level: >
            {{ states('input_number.new_battery_target') }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('sensor.solax_local_battery_charge_from_grid_to')|int == states('input_number.new_battery_target')|int or
                repeat.index == 3 }}
  mode: single

- id: '1672233470659'
  alias: Sinks - Put 2kW electric heater on (excess solar)
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.request_2kw_heater
    for:
      hours: 0
      minutes: 0
      seconds: 15
    to: "on"
  action:
  - type: turn_on
    device_id: 273edc8e0b6dcd4117de51becf83b2d0
    entity_id: switch.heater
    domain: switch
  mode: single

- id: '1634984084830'
  alias: Sinks - Turn 2kW electric heater off
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.request_2kw_heater
    for:
      hours: 0
      minutes: 0
      seconds: 15
    to: "off"
  action:
  - type: turn_off
    device_id: 273edc8e0b6dcd4117de51becf83b2d0
    entity_id: switch.heater
    domain: switch
  mode: single

- id: '1105783920394'
  alias: Sinks - Put 3kW immersion heater (excess solar or night start)
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.request_3kw_immersion
    for:
      hours: 0
      minutes: 2
      seconds: 0
    to: "on"
  - platform: time
    at: "01:00:00"      
  - platform: time
    at: "02:00:00"  
  - platform: time
    at: "03:00:00"      
  action:
  - repeat:
      sequence:
      - type: turn_on
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == on or repeat.index == 3 }}
  mode: single

- id: '1029486719232'
  alias: Sinks - Turn 3kW immersion heater off (max temp)
  description: Turn off completely if thermostat starts turning off the heating (hot enough)
  trigger:
  - platform: numeric_state
    entity_id: sensor.sonoff_100168acb6_power
    for:
      hours: 0
      minutes: 4
      seconds: 0
    below: 1000
  condition: 
  - condition: time
    after: "00:30:00"
    before: "04:30:00"    
  action:
  - repeat:
      sequence:
      - type: turn_off
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
          milliseconds: 0
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == off or repeat.index == 3 }}
  mode: single

- id: '1283957837432'
  alias: Sinks - Turn 3kW immersion heater off (low solar or night end)
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.request_3kw_immersion
    for:
      hours: 0
      minutes: 0
      seconds: 30
    to: "off"
  - platform: time
    at: "01:50:00"         
  - platform: time
    at: "02:50:00"       
  - platform: time
    at: "03:50:00"    
  action:
  - repeat:
      sequence:
      - type: turn_off
        device_id: 0e56664e1317e879ea8852efe217d98b
        entity_id: switch.sonoff_100168acb6
        domain: switch
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('switch.sonoff_100168acb6') == off or repeat.index == 3 }}
  mode: single

- id: "1302984839203"
  alias: Set electric tariff
  description: "Set Electric Tariff for utility sensor"
  trigger:
  - platform: time
    at: "00:30:00"
    variables:
      tariff: offpeak
  - platform: time
    at: "04:30:00"
    variables:
      tariff: peak
  condition: []
  action:
  - service: select.select_option
    target:
      entity_id: select.daily_grid
    data:
      option: "{{ tariff }}"
  - service: select.select_option
    target:
      entity_id: select.monthly_hot_water
    data:
      option: "{{ tariff }}"
  - service: input_number.set_value
    target:
      entity_id: input_number.electricity_tariff_cost
    data:
      value: >
        {% set cost = dict(peak=0.41, offpeak=0.12) %}
        {{ cost[tariff] }}
  mode: single

# Keep refreshing the energy readings for manual inspection and more snappy automations
- id: "1019847854392"
  alias: Refresh local inverter energy readings
  description: "Updates local inverter readings"
  trigger:
  - platform: time_pattern
    seconds: "/5"
  condition: 
  - condition: time
    after: "06:00:00"
    before: "22:00:00"
  action:
  - service: homeassistant.update_entity
    entity_id: sensor.solax_rest_local
  mode: single

# Always reset to the same state - i.e. no off-peak forced charging overnight
- id: "1143938438939"
  alias: Battery - Disable forced charge
  description: "Allows for discharge if too much energy stored from previous day (default state)"
  trigger:
  - platform: time
    at: "23:40:00"
  action:
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_period2_enable
        data:
          # 1 = enabled, 0 = disabled
          enabled: >
            {{ 0 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('sensor.solax_local_battery_chd2_enabled')|int == 0 or repeat.index == 3 }}
  mode: single

# Detect if battery needs topping up within the off-peak tariff or if discharge should stop and the remainder power be left for peak usage 
# (+4 is how much the inverter overshoots the target charge, +5 is buffer in case of fast discharge)
- id: "1029376657476"
  alias: Battery - Enable forced charge
  description: "Stops allowed discharge and allows for charging to target"
  trigger:
  - platform: time_pattern
    minutes: "/1"
  condition: 
  - condition: time
    after: "00:25:00"
    before: "04:20:00"
  - condition: template
    value_template: >-
      {{ states('sensor.solax_local_battery_chd2_enabled')|int == 0 }}
  - condition: template
    value_template: >-
      {{ states('sensor.solax_local_battery_soc')|int <= states('sensor.solax_local_battery_charge_from_grid_to')|int + 9 }}
  action:
  - repeat:
      sequence:
      - service: rest_command.solax_local_set_period2_enable
        data:
          # 1 = enabled, 0 = disabled
          enabled: >
            {{ 1 }}
      - delay:
          hours: 0
          minutes: 0
          seconds: 10
          milliseconds: 0
      - service: homeassistant.update_entity
        entity_id: sensor.solax_rest_local_settings

      until:
      - condition: template
        # Try up to 3 times if the updated setting doen't reflect the target
        value_template: >-
            {{ states('sensor.solax_local_battery_chd2_enabled')|int == 1 or repeat.index == 3 }}
  mode: single
